plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group
base {
	archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: 'parchment', version: parchment_version
}

repositories {
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

tasks.named('jar', Jar).configure {
	finalizedBy 'reobfJar'

	manifest {
		attributes([
				"Specification-Title"     : project.name,
				"Specification-Vendor"    : "Patbox",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : archiveVersion,
				"Implementation-Vendor"   : "Patbox",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		])
	}
}

task sourceJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.java
}

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			mod_version: project.version,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourceJar
		}
	}

	repositories {
		if (project.hasProperty('mavendir')) {
			maven { url mavendir }
		} else {
			mavenLocal()
		}
	}
}
